#version 450

struct Particle {
  vec4 position;
  vec4 direction;
  vec3 color;
};

layout(std430, binding = 0) buffer Buffer {
   Particle particles[];
};

layout(binding = 1) uniform Ubo {
  vec4 attractorCenter;
  vec4 particle_colors[3];
  uint attractorStrength;
  uint particleCount;
  float elasped;
} ubo;

layout (local_size_x = 256) in;

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

void main() {
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;

    // Don't try to write beyond particle count
    if (index >= ubo.particleCount) {
      return;
    }

    // Read particle attribute
    vec3 position = particles[index].position.xyz;
    vec3 direction = normalize(particles[index].direction.xyz);

    const vec3 MAX_SPEED = vec3(100.0);

    // compute velocity
    float distanceToMass = length(ubo.attractorCenter.xyz - position);
    float speedFactor = rand(gl_GlobalInvocationID.xx) * 0.2 + 0.8;
    vec3 toMass = normalize(ubo.attractorCenter.xyz - position) * distanceToMass * ubo.elasped * ubo.attractorStrength * speedFactor;
    direction = clamp(direction + toMass, -MAX_SPEED, MAX_SPEED);

    // Move by velocity
    position += direction * ubo.elasped;

    // choose particle color
    uint color_index = uint(floor(rand(gl_GlobalInvocationID.xx / 100.0) * 3.0));

    // Write back
    particles[index].position.xyz = position;
    particles[index].direction.xyz = direction;
    particles[index].color = ubo.particle_colors[color_index].rgb;
}